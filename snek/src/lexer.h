#pragma once

#include "input.h"
#include "log.h"


enum TokenType : int
{
	TOKEN_TYPE_NULL = 0,

	TOKEN_TYPE_STRING_LITERAL = 256,
	TOKEN_TYPE_CHAR_LITERAL,
	TOKEN_TYPE_FLOAT_LITERAL,
	TOKEN_TYPE_INT_LITERAL,

	TOKEN_TYPE_IDENTIFIER,

	TOKEN_TYPE_OP_BEGIN,
	TOKEN_TYPE_OP_PLUS,
	TOKEN_TYPE_OP_MINUS,
	TOKEN_TYPE_OP_ASTERISK,
	TOKEN_TYPE_OP_SLASH,
	TOKEN_TYPE_OP_PERCENT,
	TOKEN_TYPE_OP_AND,
	TOKEN_TYPE_OP_OR,
	TOKEN_TYPE_OP_CARET,
	TOKEN_TYPE_OP_QUESTION,
	TOKEN_TYPE_OP_EXCLAMATION,
	TOKEN_TYPE_OP_EQUALS,
	TOKEN_TYPE_OP_LESS_THAN,
	TOKEN_TYPE_OP_GREATER_THAN,
	TOKEN_TYPE_OP_END,
};

enum KeywordType {
	KEYWORD_TYPE_NULL = 0,

	KEYWORD_TYPE_IMPORT,
	KEYWORD_TYPE_VARIABLE,
	KEYWORD_TYPE_FUNCTION,
	KEYWORD_TYPE_STRUCT,
	KEYWORD_TYPE_CLASS,
	KEYWORD_TYPE_TYPEDEF,
	KEYWORD_TYPE_METHOD,

	KEYWORD_TYPE_PUBLIC,
	KEYWORD_TYPE_PRIVATE,
	KEYWORD_TYPE_STATIC,
	KEYWORD_TYPE_CONSTANT,
	KEYWORD_TYPE_EXTERN,

	KEYWORD_TYPE_IF,
	KEYWORD_TYPE_ELSE,
	KEYWORD_TYPE_FOR,
	KEYWORD_TYPE_WHILE,
	KEYWORD_TYPE_RETURN,
	KEYWORD_TYPE_BREAK,
	KEYWORD_TYPE_CONTINUE,
	KEYWORD_TYPE_DEFER,

	KEYWORD_TYPE_AS,
	KEYWORD_TYPE_SIZEOF,
	KEYWORD_TYPE_ALLOCA,
	KEYWORD_TYPE_MALLOC,
	KEYWORD_TYPE_FREE,

	KEYWORD_TYPE_TRUE,
	KEYWORD_TYPE_FALSE,
	KEYWORD_TYPE_NULL_KEYWORD,

	KEYWORD_TYPE_VOID,

	KEYWORD_TYPE_INT8,
	KEYWORD_TYPE_INT16,
	KEYWORD_TYPE_INT32,
	KEYWORD_TYPE_INT64,
	KEYWORD_TYPE_INT128,

	KEYWORD_TYPE_UINT8,
	KEYWORD_TYPE_UINT16,
	KEYWORD_TYPE_UINT32,
	KEYWORD_TYPE_UINT64,
	KEYWORD_TYPE_UINT128,

	KEYWORD_TYPE_BOOL,
	KEYWORD_TYPE_STRING,

	KEYWORD_TYPE_FLOAT16,
	KEYWORD_TYPE_FLOAT32,
	KEYWORD_TYPE_FLOAT64,
	KEYWORD_TYPE_FLOAT80,
	KEYWORD_TYPE_FLOAT128,

	KEYWORD_TYPE_PTR,
	KEYWORD_TYPE_ARRAY,
	KEYWORD_TYPE_FUNC_TYPE,
};

struct Token
{
	TokenType type;
	KeywordType keywordType = KEYWORD_TYPE_NULL;
	const char* str;
	int len;

	int line, col;
};

struct SkContext;

struct Lexer
{
	Input input;
	const char* filename;

	SkContext* context;
};


Lexer* CreateLexer(const char* src, const char* filename, SkContext* context);
void DestroyLexer(Lexer* lexer);

Token LexerNext(Lexer* lexer);
Token LexerPeek(Lexer* lexer, int offset = 0);
bool LexerHasNext(Lexer* lexer);

char* GetTokenString(Token token);
